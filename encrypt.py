import base64
from cryptography.fernet import Fernet
import os

AWS_KEY = b"NEqIjI1CsQfKQjJXITyC6tLOj_to_YOx-005CMwibVk="

def aws_encrypt(string):
    """Encryption will return a ciphertext"""
    key = AWS_KEY
    fernet = Fernet(key)

    encrypted = fernet.encrypt(string.encode())
    return encrypted


def aws_decrypt(ciphertext):
    """Decryption will return the plaintext string"""
    key = AWS_KEY
    fernet = Fernet(key)

    decrypted = fernet.decrypt(ciphertext)
    return decrypted.decode()
    


# def encryption(string):
#     # Get this from somewhere else like input()
#     plaintext = bytes(string, "utf-8")

#     key = os.environ.get('AWS_KEY')
#     key = key.encode("utf-8")

#     # Create a cipher object to encrypt data
#     cipher = AES.new(key, AES.MODE_GCM)

#     nonce = cipher.nonce  # Get the nonce generated by the cipher
#     ciphertext, tag = cipher.encrypt_and_digest(
#         plaintext)  # Encrypt and digest the plaintext

#     return ciphertext, tag, nonce

# def decryption(ciphertext):
    # key = os.environ.get('AWS_KEY')
    # key = key.encode("utf-8")

    # # Create a cipher object to decrypt data
    # cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    # plaintext = cipher.decrypt(ciphertext)

    # try:
    #     cipher.verify(tag)  # Verify the tag
    #     print("The message is authentic: {}".format(plaintext))
    # except ValueError:
    #     print("Key is incorrect or message is corrupted.")
    #     print("plaintext is: " + str(plaintext))

    # return plaintext.decode()

# Test cases
# cipher = aws_encrypt("password")
# print(cipher)
# print(aws_decrypt(cipher))
